// Copyright Â© 2025 Ory Corp
// SPDX-License-Identifier: Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ory/fosite/handler/rfc8628 (interfaces: RFC8628CodeStrategy)
//
// Generated by this command:
//
//	mockgen -package internal -destination internal/rfc8628_code_strategy.go github.com/ory/fosite/handler/rfc8628 RFC8628CodeStrategy
//

// Package internal is a generated GoMock package.
package internal

import (
	context "context"
	reflect "reflect"

	fosite "github.com/ory/fosite"
	gomock "go.uber.org/mock/gomock"
)

// MockRFC8628CodeStrategy is a mock of RFC8628CodeStrategy interface.
type MockRFC8628CodeStrategy struct {
	ctrl     *gomock.Controller
	recorder *MockRFC8628CodeStrategyMockRecorder
	isgomock struct{}
}

// MockRFC8628CodeStrategyMockRecorder is the mock recorder for MockRFC8628CodeStrategy.
type MockRFC8628CodeStrategyMockRecorder struct {
	mock *MockRFC8628CodeStrategy
}

// NewMockRFC8628CodeStrategy creates a new mock instance.
func NewMockRFC8628CodeStrategy(ctrl *gomock.Controller) *MockRFC8628CodeStrategy {
	mock := &MockRFC8628CodeStrategy{ctrl: ctrl}
	mock.recorder = &MockRFC8628CodeStrategyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRFC8628CodeStrategy) EXPECT() *MockRFC8628CodeStrategyMockRecorder {
	return m.recorder
}

// DeviceCodeSignature mocks base method.
func (m *MockRFC8628CodeStrategy) DeviceCodeSignature(ctx context.Context, code string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceCodeSignature", ctx, code)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeviceCodeSignature indicates an expected call of DeviceCodeSignature.
func (mr *MockRFC8628CodeStrategyMockRecorder) DeviceCodeSignature(ctx, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceCodeSignature", reflect.TypeOf((*MockRFC8628CodeStrategy)(nil).DeviceCodeSignature), ctx, code)
}

// GenerateDeviceCode mocks base method.
func (m *MockRFC8628CodeStrategy) GenerateDeviceCode(ctx context.Context) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateDeviceCode", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenerateDeviceCode indicates an expected call of GenerateDeviceCode.
func (mr *MockRFC8628CodeStrategyMockRecorder) GenerateDeviceCode(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateDeviceCode", reflect.TypeOf((*MockRFC8628CodeStrategy)(nil).GenerateDeviceCode), ctx)
}

// GenerateUserCode mocks base method.
func (m *MockRFC8628CodeStrategy) GenerateUserCode(ctx context.Context) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateUserCode", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenerateUserCode indicates an expected call of GenerateUserCode.
func (mr *MockRFC8628CodeStrategyMockRecorder) GenerateUserCode(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateUserCode", reflect.TypeOf((*MockRFC8628CodeStrategy)(nil).GenerateUserCode), ctx)
}

// ShouldRateLimit mocks base method.
func (m *MockRFC8628CodeStrategy) ShouldRateLimit(ctx context.Context, code string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldRateLimit", ctx, code)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShouldRateLimit indicates an expected call of ShouldRateLimit.
func (mr *MockRFC8628CodeStrategyMockRecorder) ShouldRateLimit(ctx, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldRateLimit", reflect.TypeOf((*MockRFC8628CodeStrategy)(nil).ShouldRateLimit), ctx, code)
}

// UserCodeSignature mocks base method.
func (m *MockRFC8628CodeStrategy) UserCodeSignature(ctx context.Context, code string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCodeSignature", ctx, code)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserCodeSignature indicates an expected call of UserCodeSignature.
func (mr *MockRFC8628CodeStrategyMockRecorder) UserCodeSignature(ctx, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCodeSignature", reflect.TypeOf((*MockRFC8628CodeStrategy)(nil).UserCodeSignature), ctx, code)
}

// ValidateDeviceCode mocks base method.
func (m *MockRFC8628CodeStrategy) ValidateDeviceCode(ctx context.Context, r fosite.DeviceRequester, code string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateDeviceCode", ctx, r, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateDeviceCode indicates an expected call of ValidateDeviceCode.
func (mr *MockRFC8628CodeStrategyMockRecorder) ValidateDeviceCode(ctx, r, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateDeviceCode", reflect.TypeOf((*MockRFC8628CodeStrategy)(nil).ValidateDeviceCode), ctx, r, code)
}

// ValidateUserCode mocks base method.
func (m *MockRFC8628CodeStrategy) ValidateUserCode(ctx context.Context, r fosite.DeviceRequester, code string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateUserCode", ctx, r, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateUserCode indicates an expected call of ValidateUserCode.
func (mr *MockRFC8628CodeStrategyMockRecorder) ValidateUserCode(ctx, r, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateUserCode", reflect.TypeOf((*MockRFC8628CodeStrategy)(nil).ValidateUserCode), ctx, r, code)
}
