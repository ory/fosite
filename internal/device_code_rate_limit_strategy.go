// Copyright Â© 2024 Ory Corp
// SPDX-License-Identifier: Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ory/fosite/handler/rfc8628 (interfaces: DeviceRateLimitStrategy)

// Package internal is a generated GoMock package.
package internal

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDeviceRateLimitStrategy is a mock of DeviceRateLimitStrategy interface.
type MockDeviceRateLimitStrategy struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceRateLimitStrategyMockRecorder
}

// MockDeviceRateLimitStrategyMockRecorder is the mock recorder for MockDeviceRateLimitStrategy.
type MockDeviceRateLimitStrategyMockRecorder struct {
	mock *MockDeviceRateLimitStrategy
}

// NewMockDeviceRateLimitStrategy creates a new mock instance.
func NewMockDeviceRateLimitStrategy(ctrl *gomock.Controller) *MockDeviceRateLimitStrategy {
	mock := &MockDeviceRateLimitStrategy{ctrl: ctrl}
	mock.recorder = &MockDeviceRateLimitStrategyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceRateLimitStrategy) EXPECT() *MockDeviceRateLimitStrategyMockRecorder {
	return m.recorder
}

// ShouldRateLimit mocks base method.
func (m *MockDeviceRateLimitStrategy) ShouldRateLimit(arg0 context.Context, arg1 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldRateLimit", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ShouldRateLimit indicates an expected call of ShouldRateLimit.
func (mr *MockDeviceRateLimitStrategyMockRecorder) ShouldRateLimit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldRateLimit", reflect.TypeOf((*MockDeviceRateLimitStrategy)(nil).ShouldRateLimit), arg0, arg1)
}
