// Copyright Â© 2025 Ory Corp
// SPDX-License-Identifier: Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ory/fosite/handler/oauth2 (interfaces: AuthorizeCodeStorage)
//
// Generated by this command:
//
//	mockgen -package internal -destination internal/authorize_code_storage.go github.com/ory/fosite/handler/oauth2 AuthorizeCodeStorage
//

// Package internal is a generated GoMock package.
package internal

import (
	context "context"
	reflect "reflect"

	fosite "github.com/ory/fosite"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthorizeCodeStorage is a mock of AuthorizeCodeStorage interface.
type MockAuthorizeCodeStorage struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizeCodeStorageMockRecorder
	isgomock struct{}
}

// MockAuthorizeCodeStorageMockRecorder is the mock recorder for MockAuthorizeCodeStorage.
type MockAuthorizeCodeStorageMockRecorder struct {
	mock *MockAuthorizeCodeStorage
}

// NewMockAuthorizeCodeStorage creates a new mock instance.
func NewMockAuthorizeCodeStorage(ctrl *gomock.Controller) *MockAuthorizeCodeStorage {
	mock := &MockAuthorizeCodeStorage{ctrl: ctrl}
	mock.recorder = &MockAuthorizeCodeStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorizeCodeStorage) EXPECT() *MockAuthorizeCodeStorageMockRecorder {
	return m.recorder
}

// CreateAuthorizeCodeSession mocks base method.
func (m *MockAuthorizeCodeStorage) CreateAuthorizeCodeSession(ctx context.Context, code string, request fosite.Requester) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAuthorizeCodeSession", ctx, code, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAuthorizeCodeSession indicates an expected call of CreateAuthorizeCodeSession.
func (mr *MockAuthorizeCodeStorageMockRecorder) CreateAuthorizeCodeSession(ctx, code, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuthorizeCodeSession", reflect.TypeOf((*MockAuthorizeCodeStorage)(nil).CreateAuthorizeCodeSession), ctx, code, request)
}

// GetAuthorizeCodeSession mocks base method.
func (m *MockAuthorizeCodeStorage) GetAuthorizeCodeSession(ctx context.Context, code string, session fosite.Session) (fosite.Requester, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorizeCodeSession", ctx, code, session)
	ret0, _ := ret[0].(fosite.Requester)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorizeCodeSession indicates an expected call of GetAuthorizeCodeSession.
func (mr *MockAuthorizeCodeStorageMockRecorder) GetAuthorizeCodeSession(ctx, code, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizeCodeSession", reflect.TypeOf((*MockAuthorizeCodeStorage)(nil).GetAuthorizeCodeSession), ctx, code, session)
}

// InvalidateAuthorizeCodeSession mocks base method.
func (m *MockAuthorizeCodeStorage) InvalidateAuthorizeCodeSession(ctx context.Context, code string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateAuthorizeCodeSession", ctx, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvalidateAuthorizeCodeSession indicates an expected call of InvalidateAuthorizeCodeSession.
func (mr *MockAuthorizeCodeStorageMockRecorder) InvalidateAuthorizeCodeSession(ctx, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateAuthorizeCodeSession", reflect.TypeOf((*MockAuthorizeCodeStorage)(nil).InvalidateAuthorizeCodeSession), ctx, code)
}
