// Copyright Â© 2025 Ory Corp
// SPDX-License-Identifier: Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ory/fosite (interfaces: AuthorizeEndpointHandler)
//
// Generated by this command:
//
//	mockgen -package internal -destination internal/authorize_handler.go github.com/ory/fosite AuthorizeEndpointHandler
//

// Package internal is a generated GoMock package.
package internal

import (
	context "context"
	reflect "reflect"

	fosite "github.com/ory/fosite"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthorizeEndpointHandler is a mock of AuthorizeEndpointHandler interface.
type MockAuthorizeEndpointHandler struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizeEndpointHandlerMockRecorder
	isgomock struct{}
}

// MockAuthorizeEndpointHandlerMockRecorder is the mock recorder for MockAuthorizeEndpointHandler.
type MockAuthorizeEndpointHandlerMockRecorder struct {
	mock *MockAuthorizeEndpointHandler
}

// NewMockAuthorizeEndpointHandler creates a new mock instance.
func NewMockAuthorizeEndpointHandler(ctrl *gomock.Controller) *MockAuthorizeEndpointHandler {
	mock := &MockAuthorizeEndpointHandler{ctrl: ctrl}
	mock.recorder = &MockAuthorizeEndpointHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorizeEndpointHandler) EXPECT() *MockAuthorizeEndpointHandlerMockRecorder {
	return m.recorder
}

// HandleAuthorizeEndpointRequest mocks base method.
func (m *MockAuthorizeEndpointHandler) HandleAuthorizeEndpointRequest(ctx context.Context, requester fosite.AuthorizeRequester, responder fosite.AuthorizeResponder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleAuthorizeEndpointRequest", ctx, requester, responder)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleAuthorizeEndpointRequest indicates an expected call of HandleAuthorizeEndpointRequest.
func (mr *MockAuthorizeEndpointHandlerMockRecorder) HandleAuthorizeEndpointRequest(ctx, requester, responder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleAuthorizeEndpointRequest", reflect.TypeOf((*MockAuthorizeEndpointHandler)(nil).HandleAuthorizeEndpointRequest), ctx, requester, responder)
}
