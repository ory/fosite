// Copyright Â© 2024 Ory Corp
// SPDX-License-Identifier: Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ory/fosite/handler/rfc8628 (interfaces: RFC8628CoreStorage)
//
// Generated by this command:
//
//	mockgen -package internal -destination internal/rfc8628_core_storage.go github.com/ory/fosite/handler/rfc8628 RFC8628CoreStorage
//

// Package internal is a generated GoMock package.
package internal

import (
	context "context"
	reflect "reflect"

	fosite "github.com/ory/fosite"
	gomock "go.uber.org/mock/gomock"
)

// MockRFC8628CoreStorage is a mock of RFC8628CoreStorage interface.
type MockRFC8628CoreStorage struct {
	ctrl     *gomock.Controller
	recorder *MockRFC8628CoreStorageMockRecorder
	isgomock struct{}
}

// MockRFC8628CoreStorageMockRecorder is the mock recorder for MockRFC8628CoreStorage.
type MockRFC8628CoreStorageMockRecorder struct {
	mock *MockRFC8628CoreStorage
}

// NewMockRFC8628CoreStorage creates a new mock instance.
func NewMockRFC8628CoreStorage(ctrl *gomock.Controller) *MockRFC8628CoreStorage {
	mock := &MockRFC8628CoreStorage{ctrl: ctrl}
	mock.recorder = &MockRFC8628CoreStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRFC8628CoreStorage) EXPECT() *MockRFC8628CoreStorageMockRecorder {
	return m.recorder
}

// CreateAccessTokenSession mocks base method.
func (m *MockRFC8628CoreStorage) CreateAccessTokenSession(ctx context.Context, signature string, request fosite.Requester) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessTokenSession", ctx, signature, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccessTokenSession indicates an expected call of CreateAccessTokenSession.
func (mr *MockRFC8628CoreStorageMockRecorder) CreateAccessTokenSession(ctx, signature, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessTokenSession", reflect.TypeOf((*MockRFC8628CoreStorage)(nil).CreateAccessTokenSession), ctx, signature, request)
}

// CreateDeviceAuthSession mocks base method.
func (m *MockRFC8628CoreStorage) CreateDeviceAuthSession(ctx context.Context, deviceCodeSignature, userCodeSignature string, request fosite.DeviceRequester) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeviceAuthSession", ctx, deviceCodeSignature, userCodeSignature, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDeviceAuthSession indicates an expected call of CreateDeviceAuthSession.
func (mr *MockRFC8628CoreStorageMockRecorder) CreateDeviceAuthSession(ctx, deviceCodeSignature, userCodeSignature, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeviceAuthSession", reflect.TypeOf((*MockRFC8628CoreStorage)(nil).CreateDeviceAuthSession), ctx, deviceCodeSignature, userCodeSignature, request)
}

// CreateRefreshTokenSession mocks base method.
func (m *MockRFC8628CoreStorage) CreateRefreshTokenSession(ctx context.Context, signature, accessSignature string, request fosite.Requester) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRefreshTokenSession", ctx, signature, accessSignature, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRefreshTokenSession indicates an expected call of CreateRefreshTokenSession.
func (mr *MockRFC8628CoreStorageMockRecorder) CreateRefreshTokenSession(ctx, signature, accessSignature, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRefreshTokenSession", reflect.TypeOf((*MockRFC8628CoreStorage)(nil).CreateRefreshTokenSession), ctx, signature, accessSignature, request)
}

// DeleteAccessTokenSession mocks base method.
func (m *MockRFC8628CoreStorage) DeleteAccessTokenSession(ctx context.Context, signature string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccessTokenSession", ctx, signature)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccessTokenSession indicates an expected call of DeleteAccessTokenSession.
func (mr *MockRFC8628CoreStorageMockRecorder) DeleteAccessTokenSession(ctx, signature any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessTokenSession", reflect.TypeOf((*MockRFC8628CoreStorage)(nil).DeleteAccessTokenSession), ctx, signature)
}

// DeleteRefreshTokenSession mocks base method.
func (m *MockRFC8628CoreStorage) DeleteRefreshTokenSession(ctx context.Context, signature string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRefreshTokenSession", ctx, signature)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRefreshTokenSession indicates an expected call of DeleteRefreshTokenSession.
func (mr *MockRFC8628CoreStorageMockRecorder) DeleteRefreshTokenSession(ctx, signature any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRefreshTokenSession", reflect.TypeOf((*MockRFC8628CoreStorage)(nil).DeleteRefreshTokenSession), ctx, signature)
}

// GetAccessTokenSession mocks base method.
func (m *MockRFC8628CoreStorage) GetAccessTokenSession(ctx context.Context, signature string, session fosite.Session) (fosite.Requester, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessTokenSession", ctx, signature, session)
	ret0, _ := ret[0].(fosite.Requester)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessTokenSession indicates an expected call of GetAccessTokenSession.
func (mr *MockRFC8628CoreStorageMockRecorder) GetAccessTokenSession(ctx, signature, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessTokenSession", reflect.TypeOf((*MockRFC8628CoreStorage)(nil).GetAccessTokenSession), ctx, signature, session)
}

// GetDeviceCodeSession mocks base method.
func (m *MockRFC8628CoreStorage) GetDeviceCodeSession(ctx context.Context, signature string, session fosite.Session) (fosite.DeviceRequester, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceCodeSession", ctx, signature, session)
	ret0, _ := ret[0].(fosite.DeviceRequester)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceCodeSession indicates an expected call of GetDeviceCodeSession.
func (mr *MockRFC8628CoreStorageMockRecorder) GetDeviceCodeSession(ctx, signature, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceCodeSession", reflect.TypeOf((*MockRFC8628CoreStorage)(nil).GetDeviceCodeSession), ctx, signature, session)
}

// GetRefreshTokenSession mocks base method.
func (m *MockRFC8628CoreStorage) GetRefreshTokenSession(ctx context.Context, signature string, session fosite.Session) (fosite.Requester, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefreshTokenSession", ctx, signature, session)
	ret0, _ := ret[0].(fosite.Requester)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRefreshTokenSession indicates an expected call of GetRefreshTokenSession.
func (mr *MockRFC8628CoreStorageMockRecorder) GetRefreshTokenSession(ctx, signature, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefreshTokenSession", reflect.TypeOf((*MockRFC8628CoreStorage)(nil).GetRefreshTokenSession), ctx, signature, session)
}

// InvalidateDeviceCodeSession mocks base method.
func (m *MockRFC8628CoreStorage) InvalidateDeviceCodeSession(ctx context.Context, signature string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateDeviceCodeSession", ctx, signature)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvalidateDeviceCodeSession indicates an expected call of InvalidateDeviceCodeSession.
func (mr *MockRFC8628CoreStorageMockRecorder) InvalidateDeviceCodeSession(ctx, signature any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateDeviceCodeSession", reflect.TypeOf((*MockRFC8628CoreStorage)(nil).InvalidateDeviceCodeSession), ctx, signature)
}

// RotateRefreshToken mocks base method.
func (m *MockRFC8628CoreStorage) RotateRefreshToken(ctx context.Context, requestID, refreshTokenSignature string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RotateRefreshToken", ctx, requestID, refreshTokenSignature)
	ret0, _ := ret[0].(error)
	return ret0
}

// RotateRefreshToken indicates an expected call of RotateRefreshToken.
func (mr *MockRFC8628CoreStorageMockRecorder) RotateRefreshToken(ctx, requestID, refreshTokenSignature any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RotateRefreshToken", reflect.TypeOf((*MockRFC8628CoreStorage)(nil).RotateRefreshToken), ctx, requestID, refreshTokenSignature)
}
