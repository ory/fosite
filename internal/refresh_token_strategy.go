// Copyright Â© 2025 Ory Corp
// SPDX-License-Identifier: Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ory/fosite/handler/oauth2 (interfaces: RefreshTokenStrategy)
//
// Generated by this command:
//
//	mockgen -package internal -destination internal/refresh_token_strategy.go github.com/ory/fosite/handler/oauth2 RefreshTokenStrategy
//

// Package internal is a generated GoMock package.
package internal

import (
	context "context"
	reflect "reflect"

	fosite "github.com/ory/fosite"
	gomock "go.uber.org/mock/gomock"
)

// MockRefreshTokenStrategy is a mock of RefreshTokenStrategy interface.
type MockRefreshTokenStrategy struct {
	ctrl     *gomock.Controller
	recorder *MockRefreshTokenStrategyMockRecorder
	isgomock struct{}
}

// MockRefreshTokenStrategyMockRecorder is the mock recorder for MockRefreshTokenStrategy.
type MockRefreshTokenStrategyMockRecorder struct {
	mock *MockRefreshTokenStrategy
}

// NewMockRefreshTokenStrategy creates a new mock instance.
func NewMockRefreshTokenStrategy(ctrl *gomock.Controller) *MockRefreshTokenStrategy {
	mock := &MockRefreshTokenStrategy{ctrl: ctrl}
	mock.recorder = &MockRefreshTokenStrategyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRefreshTokenStrategy) EXPECT() *MockRefreshTokenStrategyMockRecorder {
	return m.recorder
}

// GenerateRefreshToken mocks base method.
func (m *MockRefreshTokenStrategy) GenerateRefreshToken(ctx context.Context, requester fosite.Requester) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRefreshToken", ctx, requester)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenerateRefreshToken indicates an expected call of GenerateRefreshToken.
func (mr *MockRefreshTokenStrategyMockRecorder) GenerateRefreshToken(ctx, requester any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRefreshToken", reflect.TypeOf((*MockRefreshTokenStrategy)(nil).GenerateRefreshToken), ctx, requester)
}

// RefreshTokenSignature mocks base method.
func (m *MockRefreshTokenStrategy) RefreshTokenSignature(ctx context.Context, token string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshTokenSignature", ctx, token)
	ret0, _ := ret[0].(string)
	return ret0
}

// RefreshTokenSignature indicates an expected call of RefreshTokenSignature.
func (mr *MockRefreshTokenStrategyMockRecorder) RefreshTokenSignature(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshTokenSignature", reflect.TypeOf((*MockRefreshTokenStrategy)(nil).RefreshTokenSignature), ctx, token)
}

// ValidateRefreshToken mocks base method.
func (m *MockRefreshTokenStrategy) ValidateRefreshToken(ctx context.Context, requester fosite.Requester, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateRefreshToken", ctx, requester, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateRefreshToken indicates an expected call of ValidateRefreshToken.
func (mr *MockRefreshTokenStrategyMockRecorder) ValidateRefreshToken(ctx, requester, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateRefreshToken", reflect.TypeOf((*MockRefreshTokenStrategy)(nil).ValidateRefreshToken), ctx, requester, token)
}
