// Copyright Â© 2024 Ory Corp
// SPDX-License-Identifier: Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ory/fosite/handler/oauth2 (interfaces: AuthorizeCodeStrategy)
//
// Generated by this command:
//
//	mockgen -package internal -destination internal/authorize_code_strategy.go github.com/ory/fosite/handler/oauth2 AuthorizeCodeStrategy
//

// Package internal is a generated GoMock package.
package internal

import (
	context "context"
	reflect "reflect"

	fosite "github.com/ory/fosite"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthorizeCodeStrategy is a mock of AuthorizeCodeStrategy interface.
type MockAuthorizeCodeStrategy struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizeCodeStrategyMockRecorder
	isgomock struct{}
}

// MockAuthorizeCodeStrategyMockRecorder is the mock recorder for MockAuthorizeCodeStrategy.
type MockAuthorizeCodeStrategyMockRecorder struct {
	mock *MockAuthorizeCodeStrategy
}

// NewMockAuthorizeCodeStrategy creates a new mock instance.
func NewMockAuthorizeCodeStrategy(ctrl *gomock.Controller) *MockAuthorizeCodeStrategy {
	mock := &MockAuthorizeCodeStrategy{ctrl: ctrl}
	mock.recorder = &MockAuthorizeCodeStrategyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorizeCodeStrategy) EXPECT() *MockAuthorizeCodeStrategyMockRecorder {
	return m.recorder
}

// AuthorizeCodeSignature mocks base method.
func (m *MockAuthorizeCodeStrategy) AuthorizeCodeSignature(ctx context.Context, token string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthorizeCodeSignature", ctx, token)
	ret0, _ := ret[0].(string)
	return ret0
}

// AuthorizeCodeSignature indicates an expected call of AuthorizeCodeSignature.
func (mr *MockAuthorizeCodeStrategyMockRecorder) AuthorizeCodeSignature(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthorizeCodeSignature", reflect.TypeOf((*MockAuthorizeCodeStrategy)(nil).AuthorizeCodeSignature), ctx, token)
}

// GenerateAuthorizeCode mocks base method.
func (m *MockAuthorizeCodeStrategy) GenerateAuthorizeCode(ctx context.Context, requester fosite.Requester) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateAuthorizeCode", ctx, requester)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenerateAuthorizeCode indicates an expected call of GenerateAuthorizeCode.
func (mr *MockAuthorizeCodeStrategyMockRecorder) GenerateAuthorizeCode(ctx, requester any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAuthorizeCode", reflect.TypeOf((*MockAuthorizeCodeStrategy)(nil).GenerateAuthorizeCode), ctx, requester)
}

// ValidateAuthorizeCode mocks base method.
func (m *MockAuthorizeCodeStrategy) ValidateAuthorizeCode(ctx context.Context, requester fosite.Requester, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateAuthorizeCode", ctx, requester, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateAuthorizeCode indicates an expected call of ValidateAuthorizeCode.
func (mr *MockAuthorizeCodeStrategyMockRecorder) ValidateAuthorizeCode(ctx, requester, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateAuthorizeCode", reflect.TypeOf((*MockAuthorizeCodeStrategy)(nil).ValidateAuthorizeCode), ctx, requester, token)
}
