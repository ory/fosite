// Copyright Â© 2025 Ory Corp
// SPDX-License-Identifier: Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ory/fosite/handler/rfc7523 (interfaces: RFC7523KeyStorage)
//
// Generated by this command:
//
//	mockgen -package internal -destination internal/oauth2_auth_jwt_storage.go github.com/ory/fosite/handler/rfc7523 RFC7523KeyStorage
//

// Package internal is a generated GoMock package.
package internal

import (
	context "context"
	reflect "reflect"
	time "time"

	jose "github.com/go-jose/go-jose/v3"
	gomock "go.uber.org/mock/gomock"
)

// MockRFC7523KeyStorage is a mock of RFC7523KeyStorage interface.
type MockRFC7523KeyStorage struct {
	ctrl     *gomock.Controller
	recorder *MockRFC7523KeyStorageMockRecorder
	isgomock struct{}
}

// MockRFC7523KeyStorageMockRecorder is the mock recorder for MockRFC7523KeyStorage.
type MockRFC7523KeyStorageMockRecorder struct {
	mock *MockRFC7523KeyStorage
}

// NewMockRFC7523KeyStorage creates a new mock instance.
func NewMockRFC7523KeyStorage(ctrl *gomock.Controller) *MockRFC7523KeyStorage {
	mock := &MockRFC7523KeyStorage{ctrl: ctrl}
	mock.recorder = &MockRFC7523KeyStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRFC7523KeyStorage) EXPECT() *MockRFC7523KeyStorageMockRecorder {
	return m.recorder
}

// GetPublicKey mocks base method.
func (m *MockRFC7523KeyStorage) GetPublicKey(ctx context.Context, issuer, subject, keyId string) (*jose.JSONWebKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicKey", ctx, issuer, subject, keyId)
	ret0, _ := ret[0].(*jose.JSONWebKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicKey indicates an expected call of GetPublicKey.
func (mr *MockRFC7523KeyStorageMockRecorder) GetPublicKey(ctx, issuer, subject, keyId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKey", reflect.TypeOf((*MockRFC7523KeyStorage)(nil).GetPublicKey), ctx, issuer, subject, keyId)
}

// GetPublicKeyScopes mocks base method.
func (m *MockRFC7523KeyStorage) GetPublicKeyScopes(ctx context.Context, issuer, subject, keyId string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicKeyScopes", ctx, issuer, subject, keyId)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicKeyScopes indicates an expected call of GetPublicKeyScopes.
func (mr *MockRFC7523KeyStorageMockRecorder) GetPublicKeyScopes(ctx, issuer, subject, keyId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKeyScopes", reflect.TypeOf((*MockRFC7523KeyStorage)(nil).GetPublicKeyScopes), ctx, issuer, subject, keyId)
}

// GetPublicKeys mocks base method.
func (m *MockRFC7523KeyStorage) GetPublicKeys(ctx context.Context, issuer, subject string) (*jose.JSONWebKeySet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicKeys", ctx, issuer, subject)
	ret0, _ := ret[0].(*jose.JSONWebKeySet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicKeys indicates an expected call of GetPublicKeys.
func (mr *MockRFC7523KeyStorageMockRecorder) GetPublicKeys(ctx, issuer, subject any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKeys", reflect.TypeOf((*MockRFC7523KeyStorage)(nil).GetPublicKeys), ctx, issuer, subject)
}

// IsJWTUsed mocks base method.
func (m *MockRFC7523KeyStorage) IsJWTUsed(ctx context.Context, jti string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsJWTUsed", ctx, jti)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsJWTUsed indicates an expected call of IsJWTUsed.
func (mr *MockRFC7523KeyStorageMockRecorder) IsJWTUsed(ctx, jti any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsJWTUsed", reflect.TypeOf((*MockRFC7523KeyStorage)(nil).IsJWTUsed), ctx, jti)
}

// MarkJWTUsedForTime mocks base method.
func (m *MockRFC7523KeyStorage) MarkJWTUsedForTime(ctx context.Context, jti string, exp time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkJWTUsedForTime", ctx, jti, exp)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkJWTUsedForTime indicates an expected call of MarkJWTUsedForTime.
func (mr *MockRFC7523KeyStorageMockRecorder) MarkJWTUsedForTime(ctx, jti, exp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkJWTUsedForTime", reflect.TypeOf((*MockRFC7523KeyStorage)(nil).MarkJWTUsedForTime), ctx, jti, exp)
}
